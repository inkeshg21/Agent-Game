using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
public class ACOTesterAgent3 : MonoBehaviour
{
    // The ACO Controller.
    ACOCON MyACOCON = new ACOCON();

    // Array of possible waypoints.
    List<GameObject> Waypoints = new List<GameObject>();

    // Connections between nodes.
    private List<ACOConnections> Connections = new List<ACOConnections>();

    // The route generated by the ACO algorith.
    private List<ACOConnections> MyRoute3 = new List<ACOConnections>();

    // Debug line offset.
    [HideInInspector]
    public Vector3 OffSet = new Vector3(0, 0.5f, 0);

    // The Start node for any created route.
    public GameObject StartNode;

    // The max length of a path created by the ACO.
    public int MaxPathLength;
    public int iterationThreshold = 150;
    //Total number of ants in the simulation.
    public int totalNumAnts = 50;
    
    // Hidden public variables
    [HideInInspector]
    public int current;
    [HideInInspector]
    public int countit;

    // For speed
    public float speed;
    float initialspeed;

    int count;
    
    // Hidden public variables
    [HideInInspector]
    public Rigidbody rb;
    [HideInInspector]    
    public Transform target;
    [HideInInspector]
    public float finalSpeed;
    
    //For status label
    public Text speedText;
    public Text packageText;
    public Text statusText;
    
    // Start is called before the first frame update
    void Start()
    {
        // Find all the waypoints in the level.
        GameObject[] GameObjectsWithWaypointTag;
        GameObjectsWithWaypointTag = GameObject.FindGameObjectsWithTag("Waypoint");
        foreach (GameObject waypoint in GameObjectsWithWaypointTag)
        {
            WaypointCON tmpWaypointCon = waypoint.GetComponent<WaypointCON>();
            if (tmpWaypointCon)
            {
                if (tmpWaypointCon.WaypointType == WaypointCON.waypointPropsList.Goal)
                {
                    // We are creating a waypoint map of only the goal nodes. We want out ACO algorithm 

                    Waypoints.Add(waypoint);
                }
            }
        }
        // Go through the waypoints and create connections.
        foreach (GameObject waypoint in Waypoints)
        {

            foreach (GameObject WaypointConNode in Waypoints)
            {
                if (waypoint != WaypointConNode )
                {
                    ACOConnections aConnection = new ACOConnections();
                    aConnection.SetConnection(waypoint, WaypointConNode, MyACOCON.GetDefaultPheromone());
                    Connections.Add(aConnection);
                }
            }
        }
        // Run ACO
        MyRoute3 = MyACOCON.ACO(iterationThreshold, totalNumAnts, Waypoints.ToArray(), Connections, StartNode, MaxPathLength);
        initialspeed = speed;  
        statusText.text = "Collecting";       
    }

    // Draws debug objects in the editor and during editor play (if option set).
    void OnDrawGizmos()
    {
        // Draw path.
        if (MyRoute3.Count > 0)
        {
            foreach (ACOConnections aConnection in MyRoute3)
            {
                Gizmos.color = Color.white;
                Gizmos.DrawLine((aConnection.GetFromNode().transform.position + OffSet), 
                (aConnection.GetToNode().transform.position + OffSet));
            }
        }
    }
    // Update is called once per frame
    void Update()
    {
        if (MyRoute3.Count > 0)
        {
             if (transform.position != MyRoute3[current].GetToNode().transform.position)
        {
            Vector3 pos2 = Vector3.MoveTowards(transform.position, MyRoute3[current].GetToNode().transform.position, speed * Time.deltaTime);
            var LookPos = MyRoute3[current].GetToNode().transform.position - transform.position;
            LookPos.y = 0;
            transform.rotation = Quaternion.Slerp(transform.rotation, Quaternion.LookRotation(LookPos), 1);
            GetComponent<Rigidbody>().MovePosition(pos2);

                // Debug.Log(transform.position);
        }
        else
        {
            current = (current + 1) % ((MyRoute3.Count));


            // if (current + 2 == (ConnectionArray.Count - 1) && (transform.position != ConnectionArray[current].GetToNode().transform.position))
            if (current + (MyRoute3.Count - 1) == (MyRoute3.Count - 1) && (transform.position != MyRoute3[current].GetToNode().transform.position))
            {
                if ((transform.position != MyRoute3[(current + (MyRoute3.Count - 1))].GetFromNode().transform.position))
                {
                    countit = countit + 1;
                    // MyRoute3.Reverse();
                    if(countit==1)
                    {
                        this.GetComponent<PathfindingTesterAgent3>().enabled = true;
                    }

                }

            }
            else
            {
                {

                    current = (current) % ((MyRoute3.Count));
                }

                }
            }
        }
        // Speedometer
        speedText.text = (int)speed + " km/hr";
    }

    // collider 
    void OnTriggerEnter(Collider other)
    {
        // speed control
        if (other.gameObject.CompareTag("Collect3"))
        {
            other.gameObject.SetActive(false);
            count = count + 1;
            float temp = speed;
            if(count > 10 && count < 20){
                speed = speed - (0.1f * temp);
                
            }
            finalSpeed = speed;

            speedText.text = speed.ToString();
            packageText.text =  count.ToString();
            statusText.text = "Collected"; 
        }

        if (other.gameObject.CompareTag("Van1"))
        {
            //slow by 30%
            float temp4 = speed;
            speed = temp4 - (0.3f * temp4);
        }
        if (other.gameObject.CompareTag("Van2"))
        {
            //slow by 90%
            float temp3 = speed;
            speed = temp3 - (0.2f * temp3); 
        }
        if (other.gameObject.CompareTag("Van3"))
        {
            //slow by 10%
            float temp2 = speed;
            speed = temp2 - (0.7f * temp2);
        }
    }

    void OnTriggerExit(Collider other)
    {
        //For returning the speed before avoiding collison
        if (other.gameObject.CompareTag("Van3"))
        {
            speed = initialspeed;
        }
        if (other.gameObject.CompareTag("Van2"))
        {
            speed = initialspeed;
        }
        if (other.gameObject.CompareTag("Van1"))
        {
            speed = initialspeed;
        }
    }
}